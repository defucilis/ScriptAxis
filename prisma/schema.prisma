// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Everything required to store a funscript - this will change in the future!
model Script {
  id                  Int                   @id @default(autoincrement())
  name                String
  slug                String                @unique
  creator             Creator               @relation(fields: [creatorName], references: [name])
  owner               User                  @relation("ScriptOwner", fields: [userId], references: [id])
  category            Category              @relation(fields: [categoryName], references: [name])
  tags                String[]
  description         String?
  duration            Int
  thumbnail           String
  funscript           String?
  averageSpeed        Int?
  otherFiles          String[]
  sourceUrl           String?
  streamingUrl        String?
  studio              String?
  talent              String[]
  active              Boolean               @default(true)
  likedBy             User[]                @relation("ScriptLiker")
  likeCount           Int                   @default(0)
  thumbsUp            Int                   @default(1)
  thumbsDown          Int                   @default(0)
  views               Int                   @default(0)
  scriptAxisViews     Int                   @default(0)
  createdAt             DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  creatorName         String
  userId              Int
  categoryName        String
  searchString        String?
}

// Creators of scripts - may or may not be connected to a user account
model Creator {
  name       String   @id
  user       User?    @relation(fields: [userId], references: [id])
  thumbnail  String   @default("")
  scripts    Script[]
  totalViews Int      @default(0)
  totalLikes Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId     Int?
}

// Top-level categories for scripts - each script has only one
model Category {
  name    String   @id
  scripts Script[]
  count   Int      @default(0)
}

// Tags for scripts - each script can have more than one
model Tag {
  name  String @id
  count Int    @default(0)
}

//Talent for scripts - each script can have more than one
model Talent {
  name String @id
}

//Studio for scripts - each script can only have one
model Studio {
  name String @id
}

model Account {
    id                 Int       @default(autoincrement()) @id
    compoundId         String    @unique @map(name: "compound_id")
    userId             Int       @map(name: "user_id")
    providerType       String    @map(name: "provider_type")
    providerId         String    @map(name: "provider_id")
    providerAccountId  String    @map(name: "provider_account_id")
    refreshToken       String?   @map(name: "refresh_token")
    accessToken        String?   @map(name: "access_token")
    accessTokenExpires DateTime? @map(name: "access_token_expires")
    createdAt          DateTime  @default(now()) @map(name: "created_at")
    updatedAt          DateTime  @default(now()) @map(name: "updated_at")
    
    @@index([providerAccountId], name: "providerAccountId")
    @@index([providerId], name: "providerId")
    @@index([userId], name: "userId")
    @@map(name: "accounts")
}

model Session {
    id           Int      @default(autoincrement()) @id
    userId       Int      @map(name: "user_id")
    expires      DateTime
    sessionToken String   @unique @map(name: "session_token")
    accessToken  String   @unique @map(name: "access_token")
    createdAt    DateTime @default(now()) @map(name: "created_at")
    updatedAt    DateTime @default(now()) @map(name: "updated_at")
    @@map(name: "sessions")
}

model User {
    id            Int       @default(autoincrement()) @id
    name          String?
    email         String?   @unique
    emailVerified DateTime? @map(name: "email_verified")
    image         String?
    creator             Creator?
    role             Role               @default(USER)
    ownedScripts        Script[]              @relation("ScriptOwner")
    likedScripts        Script[]              @relation("ScriptLiker")
    savedFilters        String[]
    createdAt     DateTime  @default(now()) @map(name: "created_at")
    updatedAt     DateTime  @default(now()) @map(name: "updated_at")
    @@map(name: "users")
}

enum Role {
  USER
  CREATOR
  MODERATOR
  ADMIN
}

model VerificationRequest {
    id         Int      @default(autoincrement()) @id
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now()) @map(name: "created_at")
    updatedAt  DateTime @default(now()) @map(name: "updated_at")
    @@map(name: "verification_requests")
}